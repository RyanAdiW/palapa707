// Generated by gencpp from file krti18/Ardu.msg
// DO NOT EDIT!


#ifndef KRTI18_MESSAGE_ARDU_H
#define KRTI18_MESSAGE_ARDU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace krti18
{
template <class ContainerAllocator>
struct Ardu_
{
  typedef Ardu_<ContainerAllocator> Type;

  Ardu_()
    : lidar_alt(0.0)
    , switch_status(false)  {
    }
  Ardu_(const ContainerAllocator& _alloc)
    : lidar_alt(0.0)
    , switch_status(false)  {
  (void)_alloc;
    }



   typedef float _lidar_alt_type;
  _lidar_alt_type lidar_alt;

   typedef uint8_t _switch_status_type;
  _switch_status_type switch_status;





  typedef boost::shared_ptr< ::krti18::Ardu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::krti18::Ardu_<ContainerAllocator> const> ConstPtr;

}; // struct Ardu_

typedef ::krti18::Ardu_<std::allocator<void> > Ardu;

typedef boost::shared_ptr< ::krti18::Ardu > ArduPtr;
typedef boost::shared_ptr< ::krti18::Ardu const> ArduConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::krti18::Ardu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::krti18::Ardu_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace krti18

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'krti18': ['/home/ubuntu/Documents/auav/palapa707/src/krti18/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::krti18::Ardu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::krti18::Ardu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krti18::Ardu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::krti18::Ardu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krti18::Ardu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::krti18::Ardu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::krti18::Ardu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1744afd212cbd2726f4c8b2c0a527f80";
  }

  static const char* value(const ::krti18::Ardu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1744afd212cbd272ULL;
  static const uint64_t static_value2 = 0x6f4c8b2c0a527f80ULL;
};

template<class ContainerAllocator>
struct DataType< ::krti18::Ardu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "krti18/Ardu";
  }

  static const char* value(const ::krti18::Ardu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::krti18::Ardu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lidar_alt\n\
bool switch_status\n\
";
  }

  static const char* value(const ::krti18::Ardu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::krti18::Ardu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lidar_alt);
      stream.next(m.switch_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ardu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::krti18::Ardu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::krti18::Ardu_<ContainerAllocator>& v)
  {
    s << indent << "lidar_alt: ";
    Printer<float>::stream(s, indent + "  ", v.lidar_alt);
    s << indent << "switch_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.switch_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KRTI18_MESSAGE_ARDU_H
